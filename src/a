import React, { useState } from "react";
import {
  Email,
  Person,
  Phone,
  DirectionsBoat,
  Work,
  Add,
  Save,
  Close,
} from "@mui/icons-material";
import {
  Box,
  Typography,
  Paper,
  Button,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  TableContainer,
  Stack,
  ToggleButtonGroup,
  ToggleButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  IconButton,
  Divider,
} from "@mui/material";
import { Delete, Edit, AttachFile } from "@mui/icons-material";

function SeafarerCredentials() {
  const [selectedTab, setSelectedTab] = useState("coc");

  const [cocTable, setCocTable] = useState([
    {
      id: 1,
      name: "Master National Certificate of Competence",
      flagState: "Poland",
      dateIssued: "2024-11-10",
      validUntil: "2025-11-12",
      document: null,
      documentName: "",
    },
  ]);

  const [stcwTable, setStcwTable] = useState([
    {
      id: 1,
      name: "Basic Safety Training",
      flagState: "Poland",
      dateIssued: "2023-01-10",
      validUntil: "2024-01-10",
      document: null,
      documentName: "",
    },
  ]);

  const [openDialog, setOpenDialog] = useState(false);
  const [editIndex, setEditIndex] = useState(null);
  const [newEntry, setNewEntry] = useState({
    name: "",
    flagState: "",
    dateIssued: "",
    validUntil: "",
    document: null,
    documentName: "",
  });

  const handleTabChange = (event, newValue) => {
    if (newValue !== null) setSelectedTab(newValue);
  };

  const getCurrentTable = () => (selectedTab === "coc" ? cocTable : stcwTable);
  const setCurrentTable = (data) =>
    selectedTab === "coc" ? setCocTable(data) : setStcwTable(data);

  const handleOpenDialog = (index = null) => {
    const table = getCurrentTable();
    if (index !== null) {
      setEditIndex(index);
      setNewEntry(table[index]);
    } else {
      setEditIndex(null);
      setNewEntry({
        name: "",
        flagState: "",
        dateIssued: "",
        validUntil: "",
        document: null,
        documentName: "",
      });
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditIndex(null);
    setNewEntry({
      name: "",
      flagState: "",
      dateIssued: "",
      validUntil: "",
      document: null,
      documentName: "",
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewEntry((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewEntry((prev) => ({ ...prev, document: file, documentName: file.name }));
    }
  };

  const handleAddOrEditEntry = () => {
    if (!newEntry.name || !newEntry.flagState || !newEntry.dateIssued || !newEntry.validUntil) {
      alert("Please fill all fields");
      return;
    }
    if (new Date(newEntry.validUntil) < new Date(newEntry.dateIssued)) {
      alert("Valid Until date cannot be before Date Issued");
      return;
    }

    const table = getCurrentTable();
    if (editIndex !== null) {
      const updated = [...table];
      updated[editIndex] = newEntry;
      setCurrentTable(updated);
    } else {
      setCurrentTable([...table, { id: table.length + 1, ...newEntry }]);
    }

    handleCloseDialog();
  };

  const handleDelete = (index) => {
    const table = getCurrentTable();
    const updated = table.filter((_, i) => i !== index);
    setCurrentTable(updated);
  };

  const handleSave = () => {
    console.log("COC Data:", cocTable);
    console.log("STCW Data:", stcwTable);
    alert("Data saved! Check console.");
  };

  const credentials = [
    { icon: <Person />, label: "Name", value: "Ashwathy K R" },
    { icon: <Email />, label: "Email ID", value: "ashwathykr@gmail.com" },
    { icon: <Phone />, label: "Mobile Number", value: "9791971536" },
    { icon: <DirectionsBoat />, label: "Ship Name/Type", value: "M/S Training Ship 1 (Oil Tanker)" },
    { icon: <Work />, label: "Role", value: "Deck Rating" },
  ];

  return (
    <Box sx={{ p: 2, maxWidth: "1200px", mx: "auto" }}>
    
      <Paper elevation={4} sx={{ p: 3, borderRadius: 2, backgroundColor: "#F8FAFF", mb: 4 }}>
        <Typography variant="h6" sx={{ fontWeight: 700, color: "#1E3A8A", mb: 2, textAlign:"left"}}>
          Credentials
        </Typography>
        <Stack direction={{ xs: "column", sm: "row" }} spacing={2} justifyContent="space-between" >
          {credentials.map((item) => (
            <Box key={item.label} sx={{ display: "flex", gap: 1, minWidth: 200 }}>
              {item.icon}
              <Box  textAlign= "left" >
                <Typography variant="body2" color="textSecondary" fontWeight={500}>
                  {item.label}
                </Typography>
                <Typography variant="body1" fontWeight={600}>
                  {item.value}
                </Typography>
              </Box>
            </Box>
          ))}
        </Stack>
      </Paper>

    
      <ToggleButtonGroup
        value={selectedTab}
        exclusive
        onChange={handleTabChange}
        sx={{ width: "100%", borderRadius: "32px", mb: 3, overflow: "hidden" }}
      >
        <ToggleButton
          value="coc"
          sx={{
            flex: 1,
            borderRadius: 32,
            backgroundColor: selectedTab === "coc" ? "#1E3A8A" : "transparent",
            color: selectedTab === "coc" ? "#fff" : "#1E3A8A",
            "&:hover": { backgroundColor: "#0B2357", color: "#fff" },
          }}
        >
          Certificate of Competence
        </ToggleButton>
        <ToggleButton
          value="stcw"
          sx={{
            flex: 1,
            borderRadius: 32,
            borderColor: "#1E3A8A",
            color: selectedTab === "stcw" ? "#fff" : "#1E3A8A",
            backgroundColor: selectedTab === "stcw" ? "#1E3A8A" : "transparent",
            "&:hover": { backgroundColor: "#0B2357", color: "#fff" },
          }}
        >
          STCW Modular Courses
        </ToggleButton>
      </ToggleButtonGroup>

        <TableContainer   //// today edited on 24 oct
                           component={Paper}
                           elevation={0}
                           sx={{
                              width: "100%",
         height: isMobile ? "400px" : "612.96px", // mobile height smaller
         backgroundColor: "#F4FCFF",
         borderRadius: "10px",
         overflowX: isMobile ? "auto" : "hidden", // scroll only on mobile
                           }}
                         >
                           <Table
                             size="small"
                             sx={{
                               minWidth: isMobile ? 600 : 1351, // smaller min-width on mobile
                                width: "100%",
                                 backgroundColor:"#F4FCFF",
                               borderSpacing: "0px 14px",
                               borderCollapse: "separate",
                               
                             }}
                           >
                             <TableHead>
                               <TableRow sx={{ backgroundColor: "#5C5C5C" }}>
                                 {headers.map((header, idx) => (
                                   <TableCell
                                     key={idx}
                                     sx={{
                                        width:"1351px",
                                     height:"47px",
                                       color:"#E4E4E4",
                                       fontFamily: "Inter, sans-serif",
                                         fontWeight: 700,        
                                         fontStyle: "normal",         
                                      px: isMobile ? 0.5 : 1,
                                       py: isMobile ? 0.5 : 1,
                                       fontSize: isMobile ? "0.7rem" : "0.875rem",
                                     }}
                                   >
                                     {header}
                                   </TableCell>
                                 ))}
                               </TableRow>
                             </TableHead>
                             <TableBody  sx={{
                             borderRadius: "20.2px",
                             border: "1.06px solid #E4E4E4",
                           
                           
                           }}>
                               {paginatedSeafarers.map((row, index) => (
                                 <TableRow
                                   key={index}
                                   sx={{
                                     backgroundColor: "#fff",
                 "& td": { px: isMobile ? 0.5 : 1, py: isMobile ? 0.5 : 1 },
                                   }}>
                                   <TableCell  sx={{ fontSize: isMobile ? "0.7rem" : "0.875rem" }}>{row.sno}</TableCell>
                                   <TableCell >
                         
                         
     
                                     <Box sx={{ display: "flex", flexDirection: "column", gap: 0.3 }}>
                                       <Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.name}</Typography>
                                       <Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.email}</Typography>
                                       <Typography variant="body2"sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.phone}</Typography>
                                     </Box>
                                   </TableCell>
                                   <TableCell>
                                     <Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.idNumber}</Typography>
                                     <Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.IdType}</Typography>
                                     <Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.location}</Typography>
                                   </TableCell>
     
                                   <TableCell><Typography variant="body2" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.ship}</Typography>
                                     <Typography color="text.secondary" sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.ship1}</Typography>
                                   </TableCell>
     
                                   <TableCell sx={{ fontSize: isMobile ? "0.65rem" : "0.875rem" }}>{row.role}</TableCell>
     
                             
                                   <TableCell>
                                     <IconButton color="primary" component="label" sx={{ p: 0.5,color:"#006D90" }}>
                                       <AttachFile fontSize="small" />
                                       <Typography sx={{ textDecoration: "underline",fontSize: isMobile ? "0.65rem" : "0.875rem" ,color:"#006D90"  }}>viewAttachment</Typography>
                                     </IconButton>
                                   </TableCell>
                                   <TableCell>
                                     <IconButton   onClick={() => handleViewCredentials(row)} sx={{ p: 0.5,color:"#006D90",width:"54px",height:"25px"}}>
                                       <RemoveRedEyeOutlined fontSize="medium" />
                                     </IconButton>
                                   </TableCell>
                                   <TableCell>
                                     <IconButton onClick={() => handlePassword(row)} sx={{ p: 0.5 ,color:"#006D90" }}>
                                       <LockReset fontSize="medium" />
                                     </IconButton>
                                   </TableCell>
                               <TableCell align="center">
                                 <Box
                                   sx={{
                                         fontFamily: 'Inter, sans-serif',
                                     
                                         fontStyle: 'normal',   
                                       
                                         lineHeight: '140%',
                                         display: "inline-block",
                                         px: 1.5,
                                         py: 0.5,
                                         borderRadius: "12px",
                                         border: "1px solid",
                                         borderColor:  row.status === "Active" ? "green" : "red",
                                         color: row.status === "Active" ? "green" : "red",
                                         fontWeight: 600,
                                       fontSize: isMobile ? "0.65rem" : "0.875rem",
                                         textAlign: "center",
                                         cursor: "pointer",
                                         minWidth: 80,
                                   }}
                                   onClick={() => setOpenStatusDialog(row)}
                                 >
                                   <IconButton   sx={{ p: 0.5, }}>
                                       <CircleSharp sx={{width:"8.2px",height:"8.2px",color: row.status === "Active" ? "green" : "red"}} fontSize="small" />
                                     </IconButton>
                                   {row.status || "Active"}<IconButton   sx={{ p: 0.5 }}>
                                       <EditSharp fontSize="small" />
                                     </IconButton>
                                 </Box>
                               </TableCell>
     
     
                                   <TableCell>
                                 <Stack direction="row" spacing={2}  >
                                     <IconButton sx={{ border: "2px solid #6fa9e2ff",
                                               borderRadius: "8px",
                                               p: 1,
                                               display: "inline-flex",
                                               alignItems: "center",
                                               justifyContent: "center",gap:"9px"}}  variant="outlined" onClick={() => handleEdit(row)} >
                                              <Edit fontSize="small" />
                                     </IconButton>
                                     <IconButton color="error" onClick={() => handleDelete(row)}   sx={{ 
                                          border: "2px solid, #f71000ff",
                                          color:" #e03a2eff",
                                         borderRadius: "8px",
                                         p: 1,ml:"auto",
                                         display: "inline-flex",
                                         alignItems: "center",
                                         justifyContent: "center",gap:"9px" }}>
                                       <Delete fontSize="small" />
                                     </IconButton></Stack>
                                   </TableCell>
                                 </TableRow>
                               ))}
                             </TableBody>
                           </Table>
                         </TableContainer>

    
      <Box sx={{ display: "flex", justifyContent: "space-between", mt: 3 }}>
        <Button variant="outlined" onClick={() => handleOpenDialog()}sx={{border: "1px solid #064575"}}><IconButton color="#FFFFFF"><Add/></IconButton>Add</Button>
        <Button variant="contained" backgroundColor=" #259BC1"
 onClick={handleSave}><IconButton><Save/></IconButton>Save</Button>
      </Box>


      <Dialog open={openDialog} onClose={handleCloseDialog} fullWidth maxWidth="sm"   PaperProps={{
          sx: {
            
        
            backgroundColor: "#f9fbfc",
            overflow: "hidden",
          },
        }}>
        <DialogTitle  sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            fontWeight: "700",
            color:" #064575",
            pb: 1,
            pt:0,
            mt:0,
          }}>{editIndex !== null ? "Edit" : "Add"}  seafarer Credentials<IconButton ><Close onClick={handleCloseDialog}/></IconButton></DialogTitle>
        <Divider/><DialogContent>
          <Stack spacing={2} mt={1}>
               <Typography variant="body1"  mb={0.5} >{selectedTab === "coc" ? "COC Name" : "Course Name"}</Typography>
            <TextField required
              name="name"
              fullWidth
              value={newEntry.name}
              onChange={handleChange}
              
            /><Typography variant="body1"  mb={0.5} >Flag State</Typography>
            <TextField
            
              name="flagState"
              fullWidth
              value={newEntry.flagState}
              onChange={handleChange}
            /><Typography variant="body1"  mb={0.5} >Date Issued</Typography>
            <TextField
            
              name="dateIssued"
              type="date"
              InputLabelProps={{ shrink: true }}
              fullWidth
              value={newEntry.dateIssued}
              onChange={handleChange}
            /><Typography variant="body1"  mb={0.5} > Valid Until</Typography>
            <TextField
             
              name="validUntil"
              type="date"
              InputLabelProps={{ shrink: true }}
              fullWidth
              value={newEntry.validUntil}
              onChange={handleChange}
            /><Typography variant="body1"  mb={0.5} >Upload Documents</Typography>
            <Button
              variant="outlined"
              component="label"
              startIcon={<AttachFile />}
            >
              {newEntry.documentName || "Upload Document"}
              <input
                type="file"
                hidden
                onChange={handleFileChange}
                accept=".pdf,.txt,.doc,.docx,.jpg,.svg,.png"
              />
            </Button>
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button variant="contained" onClick={handleAddOrEditEntry}>
                   {editIndex !== null ? "Update" : "Add"}
                 </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

export default SeafarerCredentials;
<Box
      sx={{
        mb: 1,
        display: "flex",
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "space-between",
        gap: 0,
        width: "100%",
      }}
    >
      {/* 🔍 Search Bar */}
      <Paper
        sx={{
          p: 1,
          display: "flex",
          alignItems: "center",
          borderRadius: "8px",
          width: isMobile ? "10%" : "480px",
          height: "40px",
          boxShadow: "none",
          border: "1px solid #E0E0E0",
          gap: "8px",
        }}
      >
        <IconButton size="small">
          <Search />
        </IconButton>
        <InputBase
          sx={{
            ml: 1,
            flex: 1,
            fontFamily: "Poppins, sans-serif",
            fontSize: "14px",
          }}
          placeholder="Search or filter..."
        />
      </Paper>
      <Box
        sx={{
          display: "flex",
          flexDirection: "row",
          gap: 1,
          flex: isMobile ? 0 : 1,
          justifyContent: "flex-end",
        }}
      >
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleAdd}
          sx={{
            fontFamily: "Poppins, sans-serif",
            fontWeight: 600,
            fontSize: "12px",
            textTransform: "uppercase",
            backgroundColor: "#006D90",
            color: "#fff",
            borderRadius: "6px",
            height: "36px",
            minWidth: "100px", 
            "&:hover": { backgroundColor: "#005b78" },
          }}
        >
          Add seafarer
        </Button>

        <Button
          variant="outlined"
          startIcon={<CloudUploadOutlined />}
          onClick={handleBulkUpload}
          sx={{
            fontFamily: "Poppins, sans-serif",
            fontWeight: 600,
            fontSize: "12px",
            textTransform: "uppercase",
            borderColor: "#006D90",
            color: "#006D90",
            backgroundColor: "#fff",
            borderRadius: "6px",
            height: "36px",
            minWidth: "100px",
            "&:hover": {
              backgroundColor: "#E3F2F6",
              borderColor: "#005b78",
            },
          }}
        >
          Bulk Upload
        </Button>
      </Box>
    </Box>